// Code generated by mockery v2.43.2. DO NOT EDIT.

package config_mocks

import mock "github.com/stretchr/testify/mock"

// MockConfig is an autogenerated mock type for the Config type
type MockConfig struct {
	mock.Mock
}

type MockConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *MockConfig) EXPECT() *MockConfig_Expecter {
	return &MockConfig_Expecter{mock: &_m.Mock}
}

// GetEnv provides a mock function with given fields: key
func (_m *MockConfig) GetEnv(key string) string {
	ret := _m.Called(key)

	if len(ret) == 0 {
		panic("no return value specified for GetEnv")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(key)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockConfig_GetEnv_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetEnv'
type MockConfig_GetEnv_Call struct {
	*mock.Call
}

// GetEnv is a helper method to define mock.On call
//   - key string
func (_e *MockConfig_Expecter) GetEnv(key interface{}) *MockConfig_GetEnv_Call {
	return &MockConfig_GetEnv_Call{Call: _e.mock.On("GetEnv", key)}
}

func (_c *MockConfig_GetEnv_Call) Run(run func(key string)) *MockConfig_GetEnv_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockConfig_GetEnv_Call) Return(_a0 string) *MockConfig_GetEnv_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockConfig_GetEnv_Call) RunAndReturn(run func(string) string) *MockConfig_GetEnv_Call {
	_c.Call.Return(run)
	return _c
}

// LoadConfig provides a mock function with given fields:
func (_m *MockConfig) LoadConfig() {
	_m.Called()
}

// MockConfig_LoadConfig_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LoadConfig'
type MockConfig_LoadConfig_Call struct {
	*mock.Call
}

// LoadConfig is a helper method to define mock.On call
func (_e *MockConfig_Expecter) LoadConfig() *MockConfig_LoadConfig_Call {
	return &MockConfig_LoadConfig_Call{Call: _e.mock.On("LoadConfig")}
}

func (_c *MockConfig_LoadConfig_Call) Run(run func()) *MockConfig_LoadConfig_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockConfig_LoadConfig_Call) Return() *MockConfig_LoadConfig_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockConfig_LoadConfig_Call) RunAndReturn(run func()) *MockConfig_LoadConfig_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockConfig creates a new instance of MockConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockConfig {
	mock := &MockConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
